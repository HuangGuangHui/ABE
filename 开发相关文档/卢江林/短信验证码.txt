 
一、注册页面上
<tr>
<td class="td-first"><span>* </span>手机号 ：</td>
<td class="td-medium"><input name="user.cellphone"type="text" id="phone" /></td>
<td id="phone-tips" class="def-tips td-last">
验证码将通过短信发送到该手机号，请填写常用号码</td>
</tr>
<tr>
<td class="td-first"><span>* </span>手机验证码 ：</td>
<td class="td-medium">
<input type="text" id="verificationNo" class="test" onblur="verification()" disabled /> 
<input class="phone" type="button" value="获取手机验证码" onclick="send()" />
</td>
<td id="test-tips" class="def-tips td-last">同一号码  一天最多能接收五次验证码</td>
</tr>


二、对应js

//获取验证码
		function send() {
			var url = "LiseUser_sendMoblie.action";
			$.ajax({
				url : url,
				type : 'post',
				datatype : 'text',
				data : {
					'phone' : $("#phone").val()
				},
				success : function(result) {
				}
			});
		}
三、action方法，调用接口
	 //发送短信验证码
	public void sendMoblie(){
		HttpServletRequest request = ServletActionContext.getRequest();
		//获取手机号码
		String Mobile = request.getParameter("phone");
		
		VerificationUtil vu = new VerificationUtil();
		//调用接口发送短信，返回验证码
		int verificationNo = vu.send(Mobile);
		request.getSession().setAttribute("verificationNo",verificationNo);
		System.out.println(verificationNo+"验证码");
	}

四、工具接口类

package com.electron.tool;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;

import org.springframework.web.client.RestTemplate;

/**
 * 短信验证码工具类
 * @author Forme 黄仁聪
 *
 * 2016年3月21日
 */
public class VerificationUtil {
	
	/**
	 * 发送短信，返回验证码
	 */
	public int send(String Mobile){
		RandomUtil ru = new RandomUtil();
		int rand = ru.getRandoms();
		RestTemplate  template=new RestTemplate();
		template.postForObject("http://v1.avatardata.cn/Sms/Send?key=75e48b66f4fd43d691dababa6b453aaf&mobile="+Mobile+"&templateId=7f50d840e00c4c31858e3d7c6314791b&param="+rand, null,String.class );
		return rand;
	}
	
	/**
	 * 向指定 URL 发送POST方法的请求
	 * 
	 * @param url
	 *            发送请求的 URL
	 * @param param
	 *            请求参数，请求参数应该是 name1=value1&name2=value2 的形式。
	 * @return 所代表远程资源的响应结果
	 */
	public static String sendPost(String url, String param) {

		PrintWriter out = null;
		BufferedReader in = null;
		String result = "";
		try {
			URL realUrl = new URL(url);
			// 打开和URL之间的连接
			URLConnection conn = realUrl.openConnection();
			// 设置通用的请求属性
			conn.setRequestProperty("accept", "*/*");
			conn.setRequestProperty("connection", "Keep-Alive");
			conn.setRequestProperty("user-agent",
					"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			// 发送POST请求必须设置如下两行
			conn.setDoOutput(true);
			conn.setDoInput(true);
			// 获取URLConnection对象对应的输出流
			out = new PrintWriter(conn.getOutputStream());
			// 发送请求参数
			out.print(param);
			// flush输出流的缓冲
			out.flush();
			// 定义BufferedReader输入流来读取URL的响应
			in = new BufferedReader(
					new InputStreamReader(conn.getInputStream()));
			String line;
			while ((line = in.readLine()) != null) {
				result += line;
			}
		} catch (Exception e) {
			System.out.println("发送 POST 请求出现异常！" + e);
			e.printStackTrace();
		}
		// 使用finally块来关闭输出流、输入流
		finally {
			try {
				if (out != null) {
					out.close();
				}
				if (in != null) {
					in.close();
				}
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		return result;
	}
}


